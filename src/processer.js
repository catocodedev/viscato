const fs = require('fs');
const http = require('https');
var propertiesReader = require('properties-reader');
var moment = require('moment');


var config = propertiesReader('catv_config.ini');

var headCount = 0;
var bodyCount = 0;

exports.run = async function (file) {
    return new Promise((resolve, reject) => {
        fs.readFile(file, 'utf8', function (err, data) {
            if (err) reject(err);

            // Create empty variable to store the contents of the resulting file
            var html = '';
            var head = '';

            // Generate the HTML headers
            head += "<!-- Generated by Viscato " + config.get('viscato.version') + " by " + config.get('viscato.author') + " at " + moment().format('DD-MMMM-yyyy hh:mm:ss') + " -->\n";
            head += '<!DOCTYPE html>';
            head += "\n";
            head += '<html>';
            head += "\n";
            head += '<meta charset="utf-8">';
            head += "\n";
            head += '<meta name="viewport" content="width=device-width, initial-scale=1">';
            head += "\n";

            // Iterate through preconfigured scripts and add them to the HTML
            let global_scripts = config.get('main.globaljsfiles');
            let global_styles = config.get('main.globalcssfiles');

            global_scripts.split(',').forEach(function (path) {
                html += '<script src="' + path + '"></script>';
                html += "\n";
            });

            // Iterate through preconfigured stylesheets and add them to the HTML
            global_styles.split(',').forEach(function (path) {
                html += '<style rel="stylesheet/css" href="' + path + '"></style>';
                html += "\n";
            });

            // For each line in the catv file, check if it is a comment or a tag and interpret it accordingly
            // Split into lines and then process each line individually
            data.split(config.get('viscato.terminator')).forEach(line => {
                // Remove surrounding whitespace
                line = line.trim();

                // Define catv tags to look for at the beginning of the lines
                let catv_tag = [
                    '#',
                    '(link)',
                    '(??)[abbr]',
                    '(??)[address]',
                    '(??)[applet]',
                    '(??)[area]',
                    '(??)[article]',
                    '(??)[aside]',
                    '(??)[audio]',
                    '(bold)',
                    '(??)[base]',
                    '(??)[basefont]',
                    '(??)[bdi]',
                    '(??)[bdo]',
                    '(??)[big]',
                    '(quote)',
                    '(newline)',
                    '(button)',
                    '(??)[canvas]',
                    '(??)[caption]',
                    '(??)[center]',
                    '(cite)',
                    '(code)',
                    '(??)[col]',
                    '(??)[colgroup]',
                    '(??)[data]',
                    '(??)[datalist]',
                    '(??)[dd]',
                    '(??)[del]',
                    '(??)[details]',
                    '(??)[dfn]',
                    '(??)[dialog]',
                    '(??)[dir]',
                    '(??)[div]',
                    '(??)[dl]',
                    '(??)[dt]',
                    '(emphasized)',
                    '(embed)',
                    '(??)[fieldset]',
                    '(??)[figcaption]',
                    '(??)[figure]',
                    '(font)',
                    '(footer)',
                    '(form)',
                    '(??)[frame]',
                    '(??)[frameset]',
                    '(h1)',
                    '(h2)',
                    '(h3)',
                    '(h4)',
                    '(h5)',
                    '(h6)',
                    '(header)',
                    '(line)',
                    '(italic)',
                    '(??)[iframe]',
                    '(img)',
                    '(input)',
                    '(ins)',
                    '(kbd)',
                    '(label)',
                    '(caption)',
                    '(item)',
                    '(main)',
                    '(??)[map]',
                    '(??)[mark]',
                    '(??)[scale]',
                    '(navbar)',
                    '(??)[noframes]',
                    '(??)[noscript]',
                    '(object)',
                    '(orderedlist)',
                    '(??)[optgroup]',
                    '(option)',
                    '(??)[output]',
                    '(paragraph)',
                    '(??)[param]',
                    '(??)[picture]',
                    '(preformatted)',
                    '(??)[progress]',
                    '(question)',
                    '(??)[rp]',
                    '(??)[rt]',
                    '(??)[ruby]',
                    '(strikethrough)',
                    '(??)[samp]',
                    '(section)',
                    '(??)[select]',
                    '(small)',
                    '(??)[source]',
                    '(??)[span]',
                    '(strikethrough)',
                    '(bold)',
                    '(subscript)',
                    '(summary)',
                    '(superscript)',
                    '(svg)',
                    '(table)',
                    '(tablebody)',
                    '(tablecell)',
                    '(hiddencell)',
                    '(multiline)',
                    '(tablefooter)',
                    '(tabletitle)',
                    '(tableheader)',
                    '(time)',
                    '(tablerow)',
                    '(subtitle)',
                    '(kbd)',
                    '(underline)',
                    '(unorderedlist)',
                    '(variable)',
                    '(video)',
                    '(wbr)',
                ];

                // Corresponding html opening tags to catv tags
                let html_open_tag = [
                    '<!--',
                    '<a>',
                    '<abbr>',
                    '<address>',
                    '<applet>',
                    '<area>',
                    '<article>',
                    '<aside>',
                    '<audio>',
                    '<b>',
                    '<base>',
                    '<basefont>',
                    '<bdi>',
                    '<bdo>',
                    '<big>',
                    '<blockquote>',
                    '<br>', // Leave blank (break tag)
                    '<button>',
                    '<canvas>',
                    '<caption>',
                    '<center>',
                    '<cite>',
                    '<code>',
                    '<col>',
                    '<colgroup>',
                    '<data>',
                    '<datalist>',
                    '<dd>',
                    '<del>',
                    '<details>',
                    '<dfn>',
                    '<dialog>',
                    '<dir>',
                    '<div>',
                    '<dl>',
                    '<dt>',
                    '<em>',
                    '<embed>',
                    '<fieldset>',
                    '<figcaption>',
                    '<figure>',
                    '<font>',
                    '<footer>',
                    '<form>',
                    '<frame>',
                    '<frameset>',
                    '<h1>',
                    '<h2>',
                    '<h3>',
                    '<h4>',
                    '<h5>',
                    '<h6>',
                    '<header>',
                    '<hr>',
                    '<i>',
                    '<iframe>',
                    '<img>',
                    '<input>',
                    '<ins>',
                    '<kbd>',
                    '<label>',
                    '<legend>',
                    '<li>',
                    '<main>',
                    '<map>',
                    '<mark>',
                    '<meter>',
                    '<nav>',
                    '<noframes>',
                    '<noscript>',
                    '<object>',
                    '<ol>',
                    '<optgroup>',
                    '<option>',
                    '<output>',
                    '<p>',
                    '<param>',
                    '<picture>',
                    '<pre>',
                    '<progress>',
                    '<q>',
                    '<rp>',
                    '<rt>',
                    '<ruby>',
                    '<s>',
                    '<samp>',
                    '<script>',
                    '<section>',
                    '<select>',
                    '<small>',
                    '<source>',
                    '<span>',
                    '<strike>',
                    '<strong>',
                    '<sub>',
                    '<summary>',
                    '<sup>',
                    '<svg>',
                    '<table>',
                    '<tbody>',
                    '<td>',
                    '<template>',
                    '<tfoot>',
                    '<th>',
                    '<thead>',
                    '<time>',

                    '<tr>',
                    '<track>',
                    '<tt>',
                    '<u>',
                    '<ul>',
                    '<var>',
                    '<video>',
                    '<wbr>',
                ];

                // Corresponding html closing tags to the catv tags (if any, it they are identical, just put it anyways)
                let html_close_tag = [
                    '-->',
                    '</a>',
                    '</abbr>',
                    '</address>',
                    '</applet>',
                    '</area>',
                    '</article>',
                    '</aside>',
                    '</audio>',
                    '</b>',
                    '</base>',
                    '</basefont>',
                    '</bdi>',
                    '</bdo>',
                    '</big>',
                    '</blockquote>',
                    '', // Leave blank (break tag)
                    '</button>',
                    '</canvas>',
                    '</caption>',
                    '</center>',
                    '</cite>',
                    '</code>',
                    '</col>',
                    '</colgroup>',
                    '</data>',
                    '</datalist>',
                    '</dd>',
                    '</del>',
                    '</details>',
                    '</dfn>',
                    '</dialog>',
                    '</dir>',
                    '</div>',
                    '</dl>',
                    '</dt>',
                    '</em>',
                    '</embed>',
                    '</fieldset>',
                    '</figcaption>',
                    '</figure>',
                    '</font>',
                    '</footer>',
                    '</form>',
                    '</frame>',
                    '</frameset>',
                    '</h1>',
                    '</h2>',
                    '</h3>',
                    '</h4>',
                    '</h5>',
                    '</h6>',
                    '</header>',
                    '', // Leave blank (hr tag)
                    '</i>',
                    '</iframe>',
                    '</img>',
                    '</input>',
                    '</ins>',
                    '</kbd>',
                    '</label>',
                    '</legend>',
                    '</li>',
                    '</main>',
                    '</map>',
                    '</mark>',
                    '</meter>',
                    '</nav>',
                    '</noframes>',
                    '</noscript>',
                    '</object>',
                    '</ol>',
                    '</optgroup>',
                    '</option>',
                    '</output>',
                    '</p>',
                    '</param>',
                    '</picture>',
                    '</pre>',
                    '</progress>',
                    '</q>',
                    '</rp>',
                    '</rt>',
                    '</ruby>',
                    '</s>',
                    '</samp>',
                    '</script>',
                    '</section>',
                    '</select>',
                    '</small>',
                    '</source>',
                    '</span>',
                    '</strike>',
                    '</strong>',
                    '</sub>',
                    '</summary>',
                    '</sup>',
                    '</svg>',
                    '</table>',
                    '</tbody>',
                    '</td>',
                    '</template>',
                    '</tfoot>',
                    '</th>',
                    '</thead>',
                    '</time>',
                    '</tr>',
                    '</track>',
                    '</tt>',
                    '</u>',
                    '</ul>',
                    '</var>',
                    '</video>',
                    '</wbr>',
                ];

                let grouping_opening_tag = [
                    '<ol>',
                    '<ul>',
                    '<table>',
                    '<body>',
                    '<head>',
                    '<html>',
                ];


                // Save 100+ lines of code by iterating through the arrays and checking if the line starts with the tag
                // If it does, replace the tag with the corresponding html tag(s)

                catv_tag.forEach(tag => {
                    if (line.startsWith(tag)) {

                        // Get the index of the catv tag found in the line
                        var i = catv_tag.indexOf(tag);

                        console.log("CATV tag: " + tag + " with index " + i + " found in line: " + line);

                        // Replace the catv tag with the corresponding html tag and remove the catv tag from the line

                        if (grouping_opening_tag.includes(tag)) {
                            // If the catv tag is an opening tag, replace it with the corresponding html tag(s)
                            line = line.replace(tag, html_open_tag[i]);
                        } else {
                            html += html_open_tag[i] + line.substring(tag.length) + html_close_tag[i];
                        }

                        console.log("Added line: " + html_open_tag[i] + line.substring(tag.length) + html_close_tag[i]);

                    }
                });



                // Deal with the head tags separately
                if (line.startsWith('(title)')) {
                    html += '<title>' + line.substring(7) + '</title>';
                    console.log("Added opening head tag");
                    headCount++;
                }

                // Deal with the head tags separately
                if (line.startsWith('(head)')) {
                    // For the first (opening) head tag
                    if (headCount == 0) {
                        html += '<head>';
                        console.log("Added opening head tag");
                        headCount++;
                        // For the second (closing) head tag
                    } else if (headCount == 1) {
                        html += '</head>';
                        console.log("Added closing head tag");
                        headCount--;
                        // Return a syntax error if there are more than 2 head tags
                    } else if (headCount > 1) {
                        return console.log("Syntax Error: More than two head tags found.");
                    }
                }

                // Deal with the body tags separately
                if (line.startsWith('(body)')) {
                    // For the first (opening) body tag
                    if (bodyCount == 0) {
                        html += '<body>';
                        console.log("Added opening body tag");
                        bodyCount++;
                        // For the second (closing) body tag
                    } else if (bodyCount == 1) {
                        html += '</body>';
                        console.log("Added closing body tag");
                        bodyCount--;
                        // Return a syntax error if there are more than 2 body tags
                    } else if (bodyCount > 1) {
                        return console.log("Syntax Error: More than two body tags found. Line: " + indexOf(line) + ": " + line);
                    }
                }

                // Add a newline character to the end of the line 
                html += "\n";
            });

            // Close body and html tags
            html += "</html>";

            // Add the HTML headers to the html
            html = head + html;

            // Return the html to the calling function
            resolve(html);
        });
    });
}
